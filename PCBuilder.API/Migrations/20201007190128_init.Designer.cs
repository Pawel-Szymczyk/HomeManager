// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PCBuilder.Service.API.DBContext;

namespace PCBuilder.Service.API.Migrations
{
    [DbContext(typeof(PCBuilderContext))]
    [Migration("20201007190128_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PCBuilder.Service.API.Models.CPUWatercooler", b =>
                {
                    b.Property<Guid>("CPUWatercoolerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberOfFans")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SocketsCompatibility")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CPUWatercoolerId");

                    b.ToTable("CPUWatercooler");
                });

            modelBuilder.Entity("PCBuilder.Service.API.Models.Fan", b =>
                {
                    b.Property<Guid>("FanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfFuns")
                        .HasColumnType("int");

                    b.Property<bool>("PWMControl")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("RGB")
                        .HasColumnType("bit");

                    b.HasKey("FanId");

                    b.ToTable("Fan");
                });

            modelBuilder.Entity("PCBuilder.Service.API.Models.GraphicsCard", b =>
                {
                    b.Property<Guid>("GraphicsCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BoostClock")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CUDA")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GPU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GPUFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemoryType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PSU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("GraphicsCardId");

                    b.ToTable("GraphicsCards");
                });

            modelBuilder.Entity("PCBuilder.Service.API.Models.HardDrive", b =>
                {
                    b.Property<Guid>("HardDriveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Capacity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HardDriveId");

                    b.ToTable("HardDrives");
                });

            modelBuilder.Entity("PCBuilder.Service.API.Models.Motherboard", b =>
                {
                    b.Property<Guid>("MotherboardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CPU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Chipset")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FormFactor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Memory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Socket")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MotherboardId");

                    b.ToTable("Motherboards");
                });

            modelBuilder.Entity("PCBuilder.Service.API.Models.Other", b =>
                {
                    b.Property<Guid>("OtherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OtherId");

                    b.ToTable("Others");
                });

            modelBuilder.Entity("PCBuilder.Service.API.Models.PCBuild", b =>
                {
                    b.Property<Guid>("PCBuildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CPUWatercoolerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GraphicsCardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("GraphicsCardQty")
                        .HasColumnType("int");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MotherboardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PCCaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PowerSupplyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProcessorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RAMId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PCBuildId");

                    b.HasIndex("CPUWatercoolerId");

                    b.HasIndex("FanId");

                    b.HasIndex("GraphicsCardId");

                    b.HasIndex("MotherboardId");

                    b.HasIndex("PCCaseId");

                    b.HasIndex("PowerSupplyId");

                    b.HasIndex("ProcessorId");

                    b.HasIndex("RAMId");

                    b.ToTable("PCBuilds");
                });

            modelBuilder.Entity("PCBuilder.Service.API.Models.PCBuildHardDrive", b =>
                {
                    b.Property<Guid>("PCBuildId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HardDriveId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PCBuildId", "HardDriveId");

                    b.HasIndex("HardDriveId");

                    b.ToTable("PCBuildHardDrive");
                });

            modelBuilder.Entity("PCBuilder.Service.API.Models.PCBuildOther", b =>
                {
                    b.Property<Guid>("PCBuildId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OtherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PCBuildId", "OtherId");

                    b.HasIndex("OtherId");

                    b.ToTable("PCBuildOther");
                });

            modelBuilder.Entity("PCBuilder.Service.API.Models.PCCase", b =>
                {
                    b.Property<Guid>("PCCaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FormFactor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MotherboardSupport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SideWindow")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PCCaseId");

                    b.ToTable("PCCase");
                });

            modelBuilder.Entity("PCBuilder.Service.API.Models.PowerSupply", b =>
                {
                    b.Property<Guid>("PowerSupplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Certificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ModularCables")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Power")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PowerSupplyId");

                    b.ToTable("PowerSupply");
                });

            modelBuilder.Entity("PCBuilder.Service.API.Models.Processor", b =>
                {
                    b.Property<Guid>("ProcessorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Cache")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfCores")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfThreads")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ProcessorBaseFrequency")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductCollection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TDP")
                        .HasColumnType("int");

                    b.HasKey("ProcessorId");

                    b.ToTable("Processors");

                    b.HasData(
                        new
                        {
                            ProcessorId = new Guid("48bd351a-63b6-43b4-bf0b-d5cc84577f10"),
                            Cache = 8,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Link = "no url",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "i7",
                            NumberOfCores = 4,
                            NumberOfThreads = 4,
                            Price = 0m,
                            ProcessorBaseFrequency = 1m,
                            ProductCollection = "i7 10th gen",
                            TDP = 100
                        });
                });

            modelBuilder.Entity("PCBuilder.Service.API.Models.RAM", b =>
                {
                    b.Property<Guid>("RamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Capacity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChipsetCompatibility")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemorySpeed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemoryType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfModules")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("RamId");

                    b.ToTable("RAMs");
                });

            modelBuilder.Entity("PCBuilder.Service.API.Models.PCBuild", b =>
                {
                    b.HasOne("PCBuilder.Service.API.Models.CPUWatercooler", "CPUWatercooler")
                        .WithMany()
                        .HasForeignKey("CPUWatercoolerId");

                    b.HasOne("PCBuilder.Service.API.Models.Fan", "Fan")
                        .WithMany()
                        .HasForeignKey("FanId");

                    b.HasOne("PCBuilder.Service.API.Models.GraphicsCard", "GraphicsCard")
                        .WithMany()
                        .HasForeignKey("GraphicsCardId");

                    b.HasOne("PCBuilder.Service.API.Models.Motherboard", "Motherboard")
                        .WithMany()
                        .HasForeignKey("MotherboardId");

                    b.HasOne("PCBuilder.Service.API.Models.PCCase", "PCCase")
                        .WithMany()
                        .HasForeignKey("PCCaseId");

                    b.HasOne("PCBuilder.Service.API.Models.PowerSupply", "PowerSupply")
                        .WithMany()
                        .HasForeignKey("PowerSupplyId");

                    b.HasOne("PCBuilder.Service.API.Models.Processor", "Processor")
                        .WithMany()
                        .HasForeignKey("ProcessorId");

                    b.HasOne("PCBuilder.Service.API.Models.RAM", "RAM")
                        .WithMany()
                        .HasForeignKey("RAMId");
                });

            modelBuilder.Entity("PCBuilder.Service.API.Models.PCBuildHardDrive", b =>
                {
                    b.HasOne("PCBuilder.Service.API.Models.HardDrive", "HardDrive")
                        .WithMany()
                        .HasForeignKey("HardDriveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCBuilder.Service.API.Models.PCBuild", "PCBuild")
                        .WithMany("PCBuildHardDrives")
                        .HasForeignKey("PCBuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PCBuilder.Service.API.Models.PCBuildOther", b =>
                {
                    b.HasOne("PCBuilder.Service.API.Models.Other", "Other")
                        .WithMany()
                        .HasForeignKey("OtherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCBuilder.Service.API.Models.PCBuild", "PCBuild")
                        .WithMany("PCBuildOthers")
                        .HasForeignKey("PCBuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
