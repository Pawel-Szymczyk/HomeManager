@inject HttpClient Http
@using Models.pcbuilder;
@using Microsoft.AspNetCore.Authorization
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@page "/pcbuilder/fan/create"
@attribute [Authorize]

<MudPaper Outlined="true">
    <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
        <MudTextField T="string" Label="Username" Required="true" RequiredError="User name is required!" />
        <MudTextField T="string" Class="mt-3" Label="Email" Required="true" RequiredError="Email is required!"
                      Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />
        <MudTextField T="string" Class="mt-3" Label="Password" HelperText="Choose a strong password" @ref="pwField1"
                      InputType="InputType.Password"
                      Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                      RequiredError="Password is required!" />
        <MudTextField T="string" Class="mt-3"
                      Label="Password" HelperText="Repeat the password" InputType="InputType.Password"
                      Validation="@(new Func<string, string>(PasswordMatch))" />
        <MudCheckBox T="bool" Required="true" RequiredError="You must agree" Class="ml-n2"
                     Label="I agree that MudBlazor is awesome!" />
    </MudForm>
</MudPaper>

@code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }
}
