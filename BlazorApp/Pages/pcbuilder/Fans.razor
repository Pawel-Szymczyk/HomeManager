

@inherits Models.pcbuilder.FanDataModel
@page "/pcbuilder/fans/{action}/{ParamFanId:guid}"
@page "/pcbuilder/fans/{action}"
@using Microsoft.AspNetCore.Authorization
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@attribute [Authorize]


<h1>@Title</h1>

@if (Action == "all")
{

    <MudLink Href="/pcbuilder/fans/create">Create New</MudLink>


    @if (fans == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {

        @*<MudTable Items="fans" Hover="true" Breakpoint="Breakpoint.Sm" FixedHeader="true" SortLabel="Sort By" Filter="new Func<(Fans) =>  ,bool>(FilterFunc)" @bind-SelectedItem="selected_item">*@
        <MudTable Items="fans" Hover="true" Breakpoint="Breakpoint.Sm" FixedHeader="true" SortLabel="Sort By" @bind-SelectedItem="selected_item">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Fans</MudText>
                <MudToolBarSpacer />
                <MudTextField @bind-Value="search_string" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Fans, object>(x=>x.fan.Name)">Name</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Fans, object>(x=>x.fan.Manufacturer)">Manufacturer</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Fans, object>(x=>x.fan.Price)">Price</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Manufacturer">@context.Manufacturer</MudTd>
                <MudTd DataLabel="Price">@context.Price</MudTd>

                <MudTd DataLabel="Edit">
                    <MudLink Href="@("/pcbuilder/fans/edit/" + @selected_item?.FanId)">Edit</MudLink>
                </MudTd>
                <MudTd DataLabel="Delete">
                    <MudLink Href="@("/pcbuilder/fans/delete/" + @selected_item?.FanId)">Delete</MudLink>
                </MudTd>


            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>

        @*<MudText Inline="true">Selected: @selected_item?.FanId</MudText>*@


    }
}

@if (Action == "create" || Action == "edit")
{
    @*<MudPaper  Outlined="true">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField T="string" Label="Username" Required="true" RequiredError="User name is required!" />
                <MudTextField T="string" Class="mt-3" Label="Email" Required="true" RequiredError="Email is required!"
                              Validation="@(new EmailAddressAttribute() { ErrorMessage = "The email address is invalid" })" />
                <MudTextField T="string" Class="mt-3" Label="Password" HelperText="Choose a strong password" @ref="pwField1"
                              InputType="InputType.Password"
                              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                              RequiredError="Password is required!" />
                <MudTextField T="string" Class="mt-3"
                              Label="Password" HelperText="Repeat the password" InputType="InputType.Password"
                              Validation="@(new Func<string, string>(PasswordMatch))" />
                <MudCheckBox T="bool" Required="true" RequiredError="You must agree" Class="ml-n2"
                             Label="I agree that MudBlazor is awesome!" />
            </MudForm>
        </MudPaper>*@

    <div style="display: flex; justify-content: center;">
        <EditForm Model="@fan" OnValidSubmit="CreateFan">
            <DataAnnotationsValidator />
            <MudCard style="width: 500px;">
                <MudCardContent>

                    <MudTextField Label="Label" @bind-Value="fan.Name" For="@(() => fan.Name)" />
                    <MudTextField Label="Manufacturer" @bind-Value="fan.Manufacturer" For="@(() => fan.Manufacturer)" />
                    <MudTextField Label="Dimensions" @bind-Value="fan.Dimensions" For="@(() => fan.Dimensions)" />
                    <MudTextField Label="Number Of Fans" @bind-Value="fan.NumberOfFuns" For="@(() => fan.NumberOfFuns)" />
                    <MudSwitch @bind-Checked="fan.PWMControl" Label="PWM Control" For="@(() => fan.PWMControl)" Color="Color.Primary" />
                    <MudSwitch @bind-Checked="fan.RGB" Label="RGB" For="@(() => fan.RGB)" Color="Color.Primary" />
                    <MudTextField Label="Price" @bind-Value="fan.Price" For="@(() => fan.Price)" />

                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
                </MudCardActions>
            </MudCard>
            
        </EditForm>
    </div>
}
else if (Action == "delete")
{

}




@code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }

    private void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }
}