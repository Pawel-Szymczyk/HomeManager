@*@inject HttpClient Http
    @using Models.pcbuilder;
    @using Microsoft.AspNetCore.Authorization
    @page "/pcbuilder/fans"
    @attribute [Authorize]*@

@inherits Models.pcbuilder.FanDataModel
@page "/pcbuilder/fans/{action}/{ParamFanId:guid}"
@page "/pcbuilder/fans/{action}"
@page "/pcbuilder/{action}"
@using Microsoft.AspNetCore.Authorization
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@attribute [Authorize]


<h1>@Title</h1>

@if (Action == "fans")
{
    <p>
        <a href="/pcbuilder/fans/create">Create New</a>
    </p>


    @if (fans == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {

        @*<MudTable Items="fans" Hover="true" Breakpoint="Breakpoint.Sm" FixedHeader="true" SortLabel="Sort By" Filter="new Func<(Fans) =>  ,bool>(FilterFunc)" @bind-SelectedItem="selected_item">*@
        <MudTable Items="fans" Hover="true" Breakpoint="Breakpoint.Sm" FixedHeader="true" SortLabel="Sort By" @bind-SelectedItem="selected_item">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Fans</MudText>
                <MudToolBarSpacer />
                <MudTextField @bind-Value="search_string" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Fans, object>(x=>x.fan.Name)">Name</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Fans, object>(x=>x.fan.Manufacturer)">Manufacturer</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Fans, object>(x=>x.fan.Price)">Price</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Manufacturer">@context.Manufacturer</MudTd>
                <MudTd DataLabel="Price">@context.Price</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>

        @*<MudText Inline="true">Selected: @selected_item?.FanId</MudText>*@


    }
}

@if (Action == "create" || Action == "edit")
{
    <MudPaper Outlined="true">
        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
            <MudTextField T="string" Label="Username" Required="true" RequiredError="User name is required!" />
            <MudTextField T="string" Class="mt-3" Label="Email" Required="true" RequiredError="Email is required!"
                          Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />
            <MudTextField T="string" Class="mt-3" Label="Password" HelperText="Choose a strong password" @ref="pwField1"
                          InputType="InputType.Password"
                          Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                          RequiredError="Password is required!" />
            <MudTextField T="string" Class="mt-3"
                          Label="Password" HelperText="Repeat the password" InputType="InputType.Password"
                          Validation="@(new Func<string, string>(PasswordMatch))" />
            <MudCheckBox T="bool" Required="true" RequiredError="You must agree" Class="ml-n2"
                         Label="I agree that MudBlazor is awesome!" />
        </MudForm>
    </MudPaper>
}




@*

    <MudFab Link="pcbuilder/fan" Color="Color.Secondary" Icon="@Icons.Material.Add" Size="Size.Large" />




    @code {
        private Fan[] fans;

        string search_string = "";
        Fan selected_item = null;
        HashSet<Fan> selected_items = new HashSet<Fan>();

        protected override async Task OnInitializedAsync()
        {

            fans = await Http.GetFromJsonAsync<Fan[]>("https://localhost:44324/api/v1/fans");
            //fans = await Http.GetFromJsonAsync<Fan[]>("v1/fans");
            Console.WriteLine(fans);
        }



        bool FilterFunc(Fan element)
        {
            if (string.IsNullOrWhiteSpace(search_string))
                return true;
            if (element.Manufacturer.Contains(search_string))
                return true;
            if (element.Name.Contains(search_string))
                return true;
            //if ($"{element.Number} {element.Position} {element.Molar}".Contains(search_string))
            //    return true;
            return false;
        }*@


@code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }
}