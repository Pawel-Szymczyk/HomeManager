@inject HttpClient Http
@using Models.pcbuilder;
@using Microsoft.AspNetCore.Authorization
@page "/pcbuilder/fans"
@attribute [Authorize]


@if (fans == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <MudTable Items="fans" Hover="true" Breakpoint="Breakpoint.Sm" FixedHeader="true" SortLabel="Sort By" Filter="new Func<Fan,bool>(FilterFunc)" @bind-SelectedItem="selected_item">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Fans</MudText>
            <MudToolBarSpacer />
            <MudTextField @bind-Value="search_string" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Fan, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Fan, object>(x=>x.Manufacturer)">Manufacturer</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Fan, object>(x=>x.Price)">Price</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Manufacturer">@context.Manufacturer</MudTd>
            <MudTd DataLabel="Price">@context.Price</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

    <MudText Inline="true">Selected: @selected_item?.FanId</MudText>


}

<MudFab Link="pcbuilder/fan" Color="Color.Secondary" Icon="@Icons.Material.Add" Size="Size.Large" />




@code {
    private Fan[] fans;

    string search_string = "";
    Fan selected_item = null;
    HashSet<Fan> selected_items = new HashSet<Fan>();

    protected override async Task OnInitializedAsync()
    {

        fans = await Http.GetFromJsonAsync<Fan[]>("https://localhost:44324/api/v1/fans");
        //fans = await Http.GetFromJsonAsync<Fan[]>("v1/fans");
        Console.WriteLine(fans);
    }



    bool FilterFunc(Fan element)
    {
        if (string.IsNullOrWhiteSpace(search_string))
            return true;
        if (element.Manufacturer.Contains(search_string))
            return true;
        if (element.Name.Contains(search_string))
            return true;
        //if ($"{element.Number} {element.Position} {element.Molar}".Contains(search_string))
        //    return true;
        return false;
    }
}
